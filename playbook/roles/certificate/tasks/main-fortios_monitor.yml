---
- name: "Debug"
  ansible.builtin.debug:
    msg:
      - "name         : {{ certificate_name }}"
      # - "certificate  : {{ lookup('file', certificate_file) | b64encode }}"
      # - "private_key  : {{ lookup('file', private_key_file) | b64encode }}"
  tags: ["never", "debug"]

- name: "Switching to temporary certificate to unlock current admin certificate"
  fortinet.fortios.fortios_system_global:
    vdom: "{{ vdom | default(omit, true) }}"
    system_global:
      admin_server_cert: "{{ temp_certificate_name }}"

- name: "Deleting existing certificate if it exists"
  fortinet.fortios.fortios_certificate_local:
    vdom: "{{ vdom | default(omit, true) }}"
    state: "absent"
    certificate_local:
      name: "{{ certificate_name }}"
  register: delete_cert_result
  failed_when: delete_cert_result.failed and
               ('not found' not in (delete_cert_result.msg | default('')) and
                'does not exist' not in (delete_cert_result.msg | default('')))

- name: "Uploading the local SSL certificate using monitor API"
  fortinet.fortios.fortios_monitor:
    vdom: "{{ vdom | default(omit, true) }}"
    selector: "import.vpn-certificate.local"
    params:
      scope: "global"
      type: "regular"
      certname: "{{ certificate_name }}"
      file_content: "{{ lookup('file', certificate_file) | b64encode }}"
      key_file_content: "{{ lookup('file', private_key_file) | b64encode }}"
      password: "{{ ssl_password }}"
  register: "output"

- name: "Switching admin interface to use new certificate"
  fortinet.fortios.fortios_system_global:
    vdom: "{{ vdom | default(omit, true) }}"
    system_global:
      admin_server_cert: "{{ certificate_name }}"

- name: "Debug"
  ansible.builtin.debug:
    msg: "{{ output }}"
  tags: ["never", "debug"]
